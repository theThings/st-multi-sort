(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.9.2
var compareProperty, dot;

module.exports = function(collection, expressions) {
  return collection.sort(function(a, b) {
    var expression, i, len, predicate, reverse, value;
    for (i = 0, len = expressions.length; i < len; i++) {
      expression = expressions[i];
      if (typeof expression === 'object') {
        predicate = expression.predicate;
        reverse = expression.reverse;
      } else {
        predicate = expression;
      }
      value = compareProperty(predicate, reverse)(a, b);
      if (value !== 0) {
        return value;
      }
    }
  });
};

dot = {
  get: function(obj, field) {
    var i, key, keys, len, value;
    keys = field.split('.');
    value = obj;
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      value = value[key];
    }
    return value;
  },
  set: function(obj, field, setValue) {
    var allButLastKey, i, key, keys, lastKey, len, value;
    keys = field.split('.');
    allButLastKey = keys.slice(0, -1);
    lastKey = keys[keys.length - 1];
    value = obj;
    for (i = 0, len = allButLastKey.length; i < len; i++) {
      key = allButLastKey[i];
      value = value[key] != null ? value[key] : value[key] = {};
    }
    return value[lastKey] = setValue;
  }
};

compareProperty = function(predicate, reverse) {
  var getter;
  getter = typeof predicate === 'function' ? function(obj) {
    return predicate(obj);
  } : function(obj) {
    return dot.get(obj, predicate);
  };
  getter;
  if (!reverse) {
    return function(a, b) {
      if (getter(a) < getter(b)) {
        return -1;
      } else if (getter(a) > getter(b)) {
        return 1;
      } else {
        return 0;
      }
    };
  } else {
    return function(a, b) {
      if (getter(a) > getter(b)) {
        return -1;
      } else if (getter(a) < getter(b)) {
        return 1;
      } else {
        return 0;
      }
    };
  }
};

},{}],2:[function(require,module,exports){
var ng;

require('./multi_order_by');

require('./st_element_id');

require('./st_shift_click');

ng = angular;

angular.module('smart-table').directive('stMultiSort', [
  'stConfig', '$parse', '$rootScope', 'stUniqueId', 'stShiftSort', function(stConfig, $parse, $rootScope, stUniqueId, stShiftSort) {
    return {
      restrict: 'A',
      require: '^stTable',
      link: function(scope, element, attr, ctrl) {
        var classAscent, classDescent, elementId, getter, index, predicate, sort, sortDefault, stateClasses;
        predicate = attr.stMultiSort;
        getter = $parse(predicate);
        index = 0;
        classAscent = attr.stClassAscent || stConfig.sort.ascentClass;
        classDescent = attr.stClassDescent || stConfig.sort.descentClass;
        stateClasses = [classAscent, classDescent];
        sortDefault = void 0;
        elementId = stUniqueId.generate();

        /*
        Use our custom orderBy filter, which supports reversing rows independently
         */
        ctrl.setSortFunction('multiOrderBy');

        /*
        Sort the rows.
        @param {Boolean} holdingShiftKey
         */
        sort = function(holdingShiftKey) {
          var base, reverse, tableState;
          index++;
          tableState = ctrl.tableState();
          if ((base = tableState.sort).predicate == null) {
            base.predicate = [];
          }
          reverse = index % 2 === 0;
          predicate = ng.isFunction(getter(scope)) ? getter(scope) : attr.stMultiSort;
          (function() {
            var indexOfExistingSort;
            indexOfExistingSort = (function() {
              var i, ref, sortConfig;
              ref = ctrl.tableState().sort.predicate;
              for (i in ref) {
                sortConfig = ref[i];
                if (sortConfig.elementId === elementId) {
                  return i;
                }
              }
              return -1;
            })();
            if (indexOfExistingSort !== -1) {
              return tableState.sort.predicate.splice(indexOfExistingSort, 1);
            }
          })();
          (function() {
            index = index % 2 === 0 ? 2 : 1;
            element.removeClass(stateClasses[index % 2]).addClass(stateClasses[index - 1]);
            if (!holdingShiftKey) {
              return $rootScope.$broadcast('clearOtherSortClasses', elementId);
            }
          })();
          tableState.sort.predicate.splice(stShiftSort.getIndex(elementId), 0, {
            elementId: elementId,
            predicate: predicate,
            reverse: reverse === true
          });
          tableState.pagination.start = 0;
          return ctrl.pipe();
        };
        if (attr.stSortDefault) {
          sortDefault = scope.$eval(attr.stSortDefault) != null ? scope.$eval(attr.stSortDefault) : attr.stSortDefault;
        }
        if (sortDefault) {
          index = sortDefault === 'reverse' ? 1 : 0;
          sort();
        }
        element.bind('click', function(e) {
          if (!predicate) {
            return;
          }
          if (e.shiftKey || e.ctrlKey) {
            stShiftSort.clickElement(elementId);
          } else {
            stShiftSort.clear();
          }
          return scope.$apply(function() {
            return sort(e.shiftKey || e.ctrlKey);
          });
        });
        return scope.$on('clearOtherSortClasses', function(e, sortedElementId) {
          if (sortedElementId !== elementId) {
            index = 0;
            return element.removeClass(classAscent).removeClass(classDescent);
          }
        });
      }
    };
  }
]);


},{"./multi_order_by":3,"./st_element_id":4,"./st_shift_click":5}],3:[function(require,module,exports){

/*
Like angular orderBy filter, but allows reversing each parameter individually (even getters)
 */
angular.module('smart-table').filter('multiOrderBy', function() {
  return require('orderby');
});


},{"orderby":1}],4:[function(require,module,exports){

/*
Generate unique ids to identify each sortable element on the page
 */
angular.module('smart-table').factory('stUniqueId', function() {
  var id;
  id = 0;
  return {
    generate: function() {
      return id++;
    }
  };
});


},{}],5:[function(require,module,exports){

/*
Service to manage shift clicks on elements
 */
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

angular.module('smart-table').factory('stShiftSort', function() {
  var clickedElements;
  clickedElements = [];
  return {
    getIndex: function(elementId) {
      return clickedElements.indexOf(elementId) + 1;
    },
    clickElement: function(elementId) {
      if (indexOf.call(clickedElements, elementId) < 0) {
        return clickedElements.push(elementId);
      }
    },
    clear: function() {
      return clickedElements.length = 0;
    }
  };
});


},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9nb29kZWdncy1hbmd1bGFyLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIm5vZGVfbW9kdWxlcy9vcmRlcmJ5L2xpYi9pbmRleC5qcyIsInNyYy9pbmRleC5jb2ZmZWUiLCJzcmMvbXVsdGlfb3JkZXJfYnkuY29mZmVlIiwic3JjL3N0X2VsZW1lbnRfaWQuY29mZmVlIiwic3JjL3N0X3NoaWZ0X2NsaWNrLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjkuMlxudmFyIGNvbXBhcmVQcm9wZXJ0eSwgZG90O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGV4cHJlc3Npb25zKSB7XG4gIHJldHVybiBjb2xsZWN0aW9uLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBleHByZXNzaW9uLCBpLCBsZW4sIHByZWRpY2F0ZSwgcmV2ZXJzZSwgdmFsdWU7XG4gICAgZm9yIChpID0gMCwgbGVuID0gZXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcHJlZGljYXRlID0gZXhwcmVzc2lvbi5wcmVkaWNhdGU7XG4gICAgICAgIHJldmVyc2UgPSBleHByZXNzaW9uLnJldmVyc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVkaWNhdGUgPSBleHByZXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBjb21wYXJlUHJvcGVydHkocHJlZGljYXRlLCByZXZlcnNlKShhLCBiKTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbmRvdCA9IHtcbiAgZ2V0OiBmdW5jdGlvbihvYmosIGZpZWxkKSB7XG4gICAgdmFyIGksIGtleSwga2V5cywgbGVuLCB2YWx1ZTtcbiAgICBrZXlzID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgICB2YWx1ZSA9IG9iajtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgdmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24ob2JqLCBmaWVsZCwgc2V0VmFsdWUpIHtcbiAgICB2YXIgYWxsQnV0TGFzdEtleSwgaSwga2V5LCBrZXlzLCBsYXN0S2V5LCBsZW4sIHZhbHVlO1xuICAgIGtleXMgPSBmaWVsZC5zcGxpdCgnLicpO1xuICAgIGFsbEJ1dExhc3RLZXkgPSBrZXlzLnNsaWNlKDAsIC0xKTtcbiAgICBsYXN0S2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdO1xuICAgIHZhbHVlID0gb2JqO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGFsbEJ1dExhc3RLZXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGFsbEJ1dExhc3RLZXlbaV07XG4gICAgICB2YWx1ZSA9IHZhbHVlW2tleV0gIT0gbnVsbCA/IHZhbHVlW2tleV0gOiB2YWx1ZVtrZXldID0ge307XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVtsYXN0S2V5XSA9IHNldFZhbHVlO1xuICB9XG59O1xuXG5jb21wYXJlUHJvcGVydHkgPSBmdW5jdGlvbihwcmVkaWNhdGUsIHJldmVyc2UpIHtcbiAgdmFyIGdldHRlcjtcbiAgZ2V0dGVyID0gdHlwZW9mIHByZWRpY2F0ZSA9PT0gJ2Z1bmN0aW9uJyA/IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBwcmVkaWNhdGUob2JqKTtcbiAgfSA6IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBkb3QuZ2V0KG9iaiwgcHJlZGljYXRlKTtcbiAgfTtcbiAgZ2V0dGVyO1xuICBpZiAoIXJldmVyc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKGdldHRlcihhKSA8IGdldHRlcihiKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2UgaWYgKGdldHRlcihhKSA+IGdldHRlcihiKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGlmIChnZXR0ZXIoYSkgPiBnZXR0ZXIoYikpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChnZXR0ZXIoYSkgPCBnZXR0ZXIoYikpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuIiwidmFyIG5nO1xuXG5yZXF1aXJlKCcuL211bHRpX29yZGVyX2J5Jyk7XG5cbnJlcXVpcmUoJy4vc3RfZWxlbWVudF9pZCcpO1xuXG5yZXF1aXJlKCcuL3N0X3NoaWZ0X2NsaWNrJyk7XG5cbm5nID0gYW5ndWxhcjtcblxuYW5ndWxhci5tb2R1bGUoJ3NtYXJ0LXRhYmxlJykuZGlyZWN0aXZlKCdzdE11bHRpU29ydCcsIFtcbiAgJ3N0Q29uZmlnJywgJyRwYXJzZScsICckcm9vdFNjb3BlJywgJ3N0VW5pcXVlSWQnLCAnc3RTaGlmdFNvcnQnLCBmdW5jdGlvbihzdENvbmZpZywgJHBhcnNlLCAkcm9vdFNjb3BlLCBzdFVuaXF1ZUlkLCBzdFNoaWZ0U29ydCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcmVxdWlyZTogJ15zdFRhYmxlJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gICAgICAgIHZhciBjbGFzc0FzY2VudCwgY2xhc3NEZXNjZW50LCBlbGVtZW50SWQsIGdldHRlciwgaW5kZXgsIHByZWRpY2F0ZSwgc29ydCwgc29ydERlZmF1bHQsIHN0YXRlQ2xhc3NlcztcbiAgICAgICAgcHJlZGljYXRlID0gYXR0ci5zdE11bHRpU29ydDtcbiAgICAgICAgZ2V0dGVyID0gJHBhcnNlKHByZWRpY2F0ZSk7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgY2xhc3NBc2NlbnQgPSBhdHRyLnN0Q2xhc3NBc2NlbnQgfHwgc3RDb25maWcuc29ydC5hc2NlbnRDbGFzcztcbiAgICAgICAgY2xhc3NEZXNjZW50ID0gYXR0ci5zdENsYXNzRGVzY2VudCB8fCBzdENvbmZpZy5zb3J0LmRlc2NlbnRDbGFzcztcbiAgICAgICAgc3RhdGVDbGFzc2VzID0gW2NsYXNzQXNjZW50LCBjbGFzc0Rlc2NlbnRdO1xuICAgICAgICBzb3J0RGVmYXVsdCA9IHZvaWQgMDtcbiAgICAgICAgZWxlbWVudElkID0gc3RVbmlxdWVJZC5nZW5lcmF0ZSgpO1xuXG4gICAgICAgIC8qXG4gICAgICAgIFVzZSBvdXIgY3VzdG9tIG9yZGVyQnkgZmlsdGVyLCB3aGljaCBzdXBwb3J0cyByZXZlcnNpbmcgcm93cyBpbmRlcGVuZGVudGx5XG4gICAgICAgICAqL1xuICAgICAgICBjdHJsLnNldFNvcnRGdW5jdGlvbignbXVsdGlPcmRlckJ5Jyk7XG5cbiAgICAgICAgLypcbiAgICAgICAgU29ydCB0aGUgcm93cy5cbiAgICAgICAgQHBhcmFtIHtCb29sZWFufSBob2xkaW5nU2hpZnRLZXlcbiAgICAgICAgICovXG4gICAgICAgIHNvcnQgPSBmdW5jdGlvbihob2xkaW5nU2hpZnRLZXkpIHtcbiAgICAgICAgICB2YXIgYmFzZSwgcmV2ZXJzZSwgdGFibGVTdGF0ZTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgIHRhYmxlU3RhdGUgPSBjdHJsLnRhYmxlU3RhdGUoKTtcbiAgICAgICAgICBpZiAoKGJhc2UgPSB0YWJsZVN0YXRlLnNvcnQpLnByZWRpY2F0ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBiYXNlLnByZWRpY2F0ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXZlcnNlID0gaW5kZXggJSAyID09PSAwO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IG5nLmlzRnVuY3Rpb24oZ2V0dGVyKHNjb3BlKSkgPyBnZXR0ZXIoc2NvcGUpIDogYXR0ci5zdE11bHRpU29ydDtcbiAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXhPZkV4aXN0aW5nU29ydDtcbiAgICAgICAgICAgIGluZGV4T2ZFeGlzdGluZ1NvcnQgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBpLCByZWYsIHNvcnRDb25maWc7XG4gICAgICAgICAgICAgIHJlZiA9IGN0cmwudGFibGVTdGF0ZSgpLnNvcnQucHJlZGljYXRlO1xuICAgICAgICAgICAgICBmb3IgKGkgaW4gcmVmKSB7XG4gICAgICAgICAgICAgICAgc29ydENvbmZpZyA9IHJlZltpXTtcbiAgICAgICAgICAgICAgICBpZiAoc29ydENvbmZpZy5lbGVtZW50SWQgPT09IGVsZW1lbnRJZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICBpZiAoaW5kZXhPZkV4aXN0aW5nU29ydCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlU3RhdGUuc29ydC5wcmVkaWNhdGUuc3BsaWNlKGluZGV4T2ZFeGlzdGluZ1NvcnQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5kZXggPSBpbmRleCAlIDIgPT09IDAgPyAyIDogMTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3Moc3RhdGVDbGFzc2VzW2luZGV4ICUgMl0pLmFkZENsYXNzKHN0YXRlQ2xhc3Nlc1tpbmRleCAtIDFdKTtcbiAgICAgICAgICAgIGlmICghaG9sZGluZ1NoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2NsZWFyT3RoZXJTb3J0Q2xhc3NlcycsIGVsZW1lbnRJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgICB0YWJsZVN0YXRlLnNvcnQucHJlZGljYXRlLnNwbGljZShzdFNoaWZ0U29ydC5nZXRJbmRleChlbGVtZW50SWQpLCAwLCB7XG4gICAgICAgICAgICBlbGVtZW50SWQ6IGVsZW1lbnRJZCxcbiAgICAgICAgICAgIHByZWRpY2F0ZTogcHJlZGljYXRlLFxuICAgICAgICAgICAgcmV2ZXJzZTogcmV2ZXJzZSA9PT0gdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRhYmxlU3RhdGUucGFnaW5hdGlvbi5zdGFydCA9IDA7XG4gICAgICAgICAgcmV0dXJuIGN0cmwucGlwZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoYXR0ci5zdFNvcnREZWZhdWx0KSB7XG4gICAgICAgICAgc29ydERlZmF1bHQgPSBzY29wZS4kZXZhbChhdHRyLnN0U29ydERlZmF1bHQpICE9IG51bGwgPyBzY29wZS4kZXZhbChhdHRyLnN0U29ydERlZmF1bHQpIDogYXR0ci5zdFNvcnREZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3J0RGVmYXVsdCkge1xuICAgICAgICAgIGluZGV4ID0gc29ydERlZmF1bHQgPT09ICdyZXZlcnNlJyA/IDEgOiAwO1xuICAgICAgICAgIHNvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmICghcHJlZGljYXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSkge1xuICAgICAgICAgICAgc3RTaGlmdFNvcnQuY2xpY2tFbGVtZW50KGVsZW1lbnRJZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0U2hpZnRTb3J0LmNsZWFyKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc29ydChlLnNoaWZ0S2V5IHx8IGUuY3RybEtleSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2NvcGUuJG9uKCdjbGVhck90aGVyU29ydENsYXNzZXMnLCBmdW5jdGlvbihlLCBzb3J0ZWRFbGVtZW50SWQpIHtcbiAgICAgICAgICBpZiAoc29ydGVkRWxlbWVudElkICE9PSBlbGVtZW50SWQpIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnJlbW92ZUNsYXNzKGNsYXNzQXNjZW50KS5yZW1vdmVDbGFzcyhjbGFzc0Rlc2NlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDJodmJXVXZabVZ5Y21GdUwzQnliMnBsWTNSekwzUjBhVzh2YzNRdGJYVnNkR2t0YzI5eWRDOXpjbU12YVc1a1pYZ3VZMjltWm1WbElpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMMmh2YldVdlptVnljbUZ1TDNCeWIycGxZM1J6TDNSMGFXOHZjM1F0YlhWc2RHa3RjMjl5ZEM5emNtTXZhVzVrWlhndVkyOW1abVZsSWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVUU3TzBGQlFVRXNUMEZCUVN4RFFVRlJMR3RDUVVGU096dEJRVU5CTEU5QlFVRXNRMEZCVVN4cFFrRkJVanM3UVVGRFFTeFBRVUZCTEVOQlFWRXNhMEpCUVZJN08wRkJSVUVzUlVGQlFTeEhRVUZMT3p0QlFVVk1MRTlCUVU4c1EwRkJReXhOUVVGU0xFTkJRV1VzWVVGQlppeERRVUUyUWl4RFFVRkRMRk5CUVRsQ0xFTkJRWGRETEdGQlFYaERMRVZCUVhWRU8wVkJRM0pFTEZWQlJIRkVMRVZCUlhKRUxGRkJSbkZFTEVWQlIzSkVMRmxCU0hGRUxFVkJTWEpFTEZsQlNuRkVMRVZCUzNKRUxHRkJUSEZFTEVWQlRYSkVMRk5CUVVNc1VVRkJSQ3hGUVVGWExFMUJRVmdzUlVGQmJVSXNWVUZCYmtJc1JVRkJLMElzVlVGQkwwSXNSVUZCTWtNc1YwRkJNME03VjBGRFJUdE5RVUZCTEZGQlFVRXNSVUZCVlN4SFFVRldPMDFCUTBFc1QwRkJRU3hGUVVGVExGVkJSRlE3VFVGRlFTeEpRVUZCTEVWQlFVMHNVMEZCUXl4TFFVRkVMRVZCUVZFc1QwRkJVaXhGUVVGcFFpeEpRVUZxUWl4RlFVRjFRaXhKUVVGMlFqdEJRVU5LTEZsQlFVRTdVVUZCUVN4VFFVRkJMRWRCUVZrc1NVRkJTU3hEUVVGRE8xRkJRMnBDTEUxQlFVRXNSMEZCVXl4TlFVRkJMRU5CUVU4c1UwRkJVRHRSUVVOVUxFdEJRVUVzUjBGQlVUdFJRVU5TTEZkQlFVRXNSMEZCWXl4SlFVRkpMRU5CUVVNc1lVRkJUQ3hKUVVGelFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTJ4RUxGbEJRVUVzUjBGQlpTeEpRVUZKTEVOQlFVTXNZMEZCVEN4SlFVRjFRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEzQkVMRmxCUVVFc1IwRkJaU3hEUVVOaUxGZEJSR0VzUlVGRllpeFpRVVpoTzFGQlNXWXNWMEZCUVN4SFFVRmpPMUZCUTJRc1UwRkJRU3hIUVVGWkxGVkJRVlVzUTBGQlF5eFJRVUZZTEVOQlFVRTdPMEZCUlZvN096dFJRVWRCTEVsQlFVa3NRMEZCUXl4bFFVRk1MRU5CUVhGQ0xHTkJRWEpDT3p0QlFVVkJPenM3TzFGQlNVRXNTVUZCUVN4SFFVRlBMRk5CUVVNc1pVRkJSRHRCUVVOTUxHTkJRVUU3VlVGQlFTeExRVUZCTzFWQlEwRXNWVUZCUVN4SFFVRmhMRWxCUVVrc1EwRkJReXhWUVVGTUxFTkJRVUU3TzJkQ1FVTkZMRU5CUVVNc1dVRkJZVHM3VlVGRE4wSXNUMEZCUVN4SFFVRlZMRXRCUVVFc1IwRkJVU3hEUVVGU0xFdEJRV0U3VlVGRGRrSXNVMEZCUVN4SFFVRmxMRVZCUVVVc1EwRkJReXhWUVVGSUxFTkJRV01zVFVGQlFTeERRVUZQTEV0QlFWQXNRMEZCWkN4RFFVRklMRWRCUVhGRExFMUJRVUVzUTBGQlR5eExRVUZRTEVOQlFYSkRMRWRCUVhkRUxFbEJRVWtzUTBGQlF6dFZRVVYwUlN4RFFVRkJMRk5CUVVFN1FVRkRSQ3huUWtGQlFUdFpRVUZCTEcxQ1FVRkJMRWRCUVhsQ0xFTkJRVUVzVTBGQlFUdEJRVU4yUWl4clFrRkJRVHRCUVVGQk8wRkJRVUVzYlVKQlFVRXNVVUZCUVRzN1owSkJRMFVzU1VGQlJ5eFZRVUZWTEVOQlFVTXNVMEZCV0N4TFFVRjNRaXhUUVVFelFqdEJRVU5GTEhsQ1FVRlBMRVZCUkZRN08wRkJSRVk3UVVGSFFTeHhRa0ZCVHl4RFFVRkRPMWxCU21Vc1EwRkJRU3hEUVVGSUxFTkJRVUU3V1VGTGRFSXNTVUZCUnl4dFFrRkJRU3hMUVVGNVFpeERRVUZETEVOQlFUZENPM0ZDUVVORkxGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVRGQ0xFTkJRV2xETEcxQ1FVRnFReXhGUVVGelJDeERRVUYwUkN4RlFVUkdPenRWUVU1RExFTkJRVUVzUTBGQlNDeERRVUZCTzFWQlUwY3NRMEZCUVN4VFFVRkJPMWxCUTBRc1MwRkJRU3hIUVVGWExFdEJRVUVzUjBGQlVTeERRVUZTTEV0QlFXRXNRMEZCYUVJc1IwRkJkVUlzUTBGQmRrSXNSMEZCT0VJN1dVRkRkRU1zVDBGQlR5eERRVUZETEZkQlFWSXNRMEZCYjBJc1dVRkJZU3hEUVVGQkxFdEJRVUVzUjBGQlVTeERRVUZTTEVOQlFXcERMRU5CUVRSRExFTkJRVU1zVVVGQk4wTXNRMEZCYzBRc1dVRkJZU3hEUVVGQkxFdEJRVUVzUjBGQlVTeERRVUZTTEVOQlFXNUZPMWxCUTBFc1NVRkJSeXhEUVVGRExHVkJRVW83Y1VKQlEwVXNWVUZCVlN4RFFVRkRMRlZCUVZnc1EwRkJjMElzZFVKQlFYUkNMRVZCUVN0RExGTkJRUzlETEVWQlJFWTdPMVZCU0VNc1EwRkJRU3hEUVVGSUxFTkJRVUU3VlVGTlFTeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVFeFFpeERRVUZwUXl4WFFVRlhMRU5CUVVNc1VVRkJXaXhEUVVGeFFpeFRRVUZ5UWl4RFFVRnFReXhGUVVGclJTeERRVUZzUlN4RlFVTkZPMWxCUVVFc1UwRkJRU3hGUVVGWExGTkJRVmc3V1VGRFFTeFRRVUZCTEVWQlFWY3NVMEZFV0R0WlFVVkJMRTlCUVVFc1JVRkJVeXhQUVVGQkxFdEJRVmNzU1VGR2NFSTdWMEZFUmp0VlFVdEJMRlZCUVZVc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQmRFSXNSMEZCT0VJN2FVSkJRemxDTEVsQlFVa3NRMEZCUXl4SlFVRk1MRU5CUVVFN1VVRTFRa3M3VVVFNFFsQXNTVUZCUnl4SlFVRkpMRU5CUVVNc1lVRkJVanRWUVVORkxGZEJRVUVzUjBGQmFVSXNkVU5CUVVnc1IwRkJlVU1zUzBGQlN5eERRVUZETEV0QlFVNHNRMEZCV1N4SlFVRkpMRU5CUVVNc1lVRkJha0lzUTBGQmVrTXNSMEZCT0VVc1NVRkJTU3hEUVVGRExHTkJSRzVIT3p0UlFVZEJMRWxCUVVjc1YwRkJTRHRWUVVORkxFdEJRVUVzUjBGQlZ5eFhRVUZCTEV0QlFXVXNVMEZCYkVJc1IwRkJhVU1zUTBGQmFrTXNSMEZCZDBNN1ZVRkRhRVFzU1VGQlFTeERRVUZCTEVWQlJrWTdPMUZCU1VFc1QwRkJUeXhEUVVGRExFbEJRVklzUTBGQllTeFBRVUZpTEVWQlFYTkNMRk5CUVVNc1EwRkJSRHRWUVVOd1FpeEpRVUZCTEVOQlFXTXNVMEZCWkR0QlFVRkJMRzFDUVVGQk96dFZRVU5CTEVsQlFVY3NRMEZCUXl4RFFVRkRMRkZCUVVZc1NVRkJZeXhEUVVGRExFTkJRVU1zVDBGQmJrSTdXVUZEUlN4WFFVRlhMRU5CUVVNc1dVRkJXaXhEUVVGNVFpeFRRVUY2UWl4RlFVUkdPMWRCUVVFc1RVRkJRVHRaUVVkRkxGZEJRVmNzUTBGQlF5eExRVUZhTEVOQlFVRXNSVUZJUmpzN2FVSkJTVUVzUzBGQlN5eERRVUZETEUxQlFVNHNRMEZCWVN4VFFVRkJPMjFDUVVGSExFbEJRVUVzUTBGQlN5eERRVUZETEVOQlFVTXNVVUZCUml4SlFVRmpMRU5CUVVNc1EwRkJReXhQUVVGeVFqdFZRVUZJTEVOQlFXSTdVVUZPYjBJc1EwRkJkRUk3WlVGUlFTeExRVUZMTEVOQlFVTXNSMEZCVGl4RFFVRlZMSFZDUVVGV0xFVkJRVzFETEZOQlFVTXNRMEZCUkN4RlFVRkpMR1ZCUVVvN1ZVRkRha01zU1VGQlJ5eGxRVUZCTEV0QlFYRkNMRk5CUVhoQ08xbEJRMFVzUzBGQlFTeEhRVUZSTzIxQ1FVTlNMRTlCUVU4c1EwRkJReXhYUVVGU0xFTkJRVzlDTEZkQlFYQkNMRU5CUVdkRExFTkJRVU1zVjBGQmFrTXNRMEZCTmtNc1dVRkJOME1zUlVGR1JqczdVVUZFYVVNc1EwRkJia003VFVGdVJVa3NRMEZHVGpzN1JVRkVSaXhEUVU1eFJEdERRVUYyUkNKOVxuIiwiXG4vKlxuTGlrZSBhbmd1bGFyIG9yZGVyQnkgZmlsdGVyLCBidXQgYWxsb3dzIHJldmVyc2luZyBlYWNoIHBhcmFtZXRlciBpbmRpdmlkdWFsbHkgKGV2ZW4gZ2V0dGVycylcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3NtYXJ0LXRhYmxlJykuZmlsdGVyKCdtdWx0aU9yZGVyQnknLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJ29yZGVyYnknKTtcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwyaHZiV1V2Wm1WeWNtRnVMM0J5YjJwbFkzUnpMM1IwYVc4dmMzUXRiWFZzZEdrdGMyOXlkQzl6Y21NdmJYVnNkR2xmYjNKa1pYSmZZbmt1WTI5bVptVmxJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTDJodmJXVXZabVZ5Y21GdUwzQnliMnBsWTNSekwzUjBhVzh2YzNRdGJYVnNkR2t0YzI5eWRDOXpjbU12YlhWc2RHbGZiM0prWlhKZllua3VZMjltWm1WbElsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHM3TzBGQlIwRXNUMEZCVHl4RFFVRkRMRTFCUVZJc1EwRkJaU3hoUVVGbUxFTkJRVFpDTEVOQlFVTXNUVUZCT1VJc1EwRkJjVU1zWTBGQmNrTXNSVUZCY1VRc1UwRkJRVHRUUVVOdVJDeFBRVUZCTEVOQlFWRXNVMEZCVWp0QlFVUnRSQ3hEUVVGeVJDSjlcbiIsIlxuLypcbkdlbmVyYXRlIHVuaXF1ZSBpZHMgdG8gaWRlbnRpZnkgZWFjaCBzb3J0YWJsZSBlbGVtZW50IG9uIHRoZSBwYWdlXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdzbWFydC10YWJsZScpLmZhY3RvcnkoJ3N0VW5pcXVlSWQnLCBmdW5jdGlvbigpIHtcbiAgdmFyIGlkO1xuICBpZCA9IDA7XG4gIHJldHVybiB7XG4gICAgZ2VuZXJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGlkKys7XG4gICAgfVxuICB9O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDJodmJXVXZabVZ5Y21GdUwzQnliMnBsWTNSekwzUjBhVzh2YzNRdGJYVnNkR2t0YzI5eWRDOXpjbU12YzNSZlpXeGxiV1Z1ZEY5cFpDNWpiMlptWldVaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXZhRzl0WlM5bVpYSnlZVzR2Y0hKdmFtVmpkSE12ZEhScGJ5OXpkQzF0ZFd4MGFTMXpiM0owTDNOeVl5OXpkRjlsYkdWdFpXNTBYMmxrTG1OdlptWmxaU0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFN096dEJRVWRCTEU5QlFVOHNRMEZCUXl4TlFVRlNMRU5CUVdVc1lVRkJaaXhEUVVWQkxFTkJRVU1zVDBGR1JDeERRVVZUTEZsQlJsUXNSVUZGZFVJc1UwRkJRVHRCUVVOeVFpeE5RVUZCTzBWQlFVRXNSVUZCUVN4SFFVRkxPMU5CUlV3N1NVRkRSU3hSUVVGQkxFVkJRVlVzVTBGQlFUdGhRVUZITEVWQlFVRTdTVUZCU0N4RFFVUmFPenRCUVVoeFFpeERRVVoyUWlKOVxuIiwiXG4vKlxuU2VydmljZSB0byBtYW5hZ2Ugc2hpZnQgY2xpY2tzIG9uIGVsZW1lbnRzXG4gKi9cbnZhciBpbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XG5cbmFuZ3VsYXIubW9kdWxlKCdzbWFydC10YWJsZScpLmZhY3RvcnkoJ3N0U2hpZnRTb3J0JywgZnVuY3Rpb24oKSB7XG4gIHZhciBjbGlja2VkRWxlbWVudHM7XG4gIGNsaWNrZWRFbGVtZW50cyA9IFtdO1xuICByZXR1cm4ge1xuICAgIGdldEluZGV4OiBmdW5jdGlvbihlbGVtZW50SWQpIHtcbiAgICAgIHJldHVybiBjbGlja2VkRWxlbWVudHMuaW5kZXhPZihlbGVtZW50SWQpICsgMTtcbiAgICB9LFxuICAgIGNsaWNrRWxlbWVudDogZnVuY3Rpb24oZWxlbWVudElkKSB7XG4gICAgICBpZiAoaW5kZXhPZi5jYWxsKGNsaWNrZWRFbGVtZW50cywgZWxlbWVudElkKSA8IDApIHtcbiAgICAgICAgcmV0dXJuIGNsaWNrZWRFbGVtZW50cy5wdXNoKGVsZW1lbnRJZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gY2xpY2tlZEVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9O1xufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDJodmJXVXZabVZ5Y21GdUwzQnliMnBsWTNSekwzUjBhVzh2YzNRdGJYVnNkR2t0YzI5eWRDOXpjbU12YzNSZmMyaHBablJmWTJ4cFkyc3VZMjltWm1WbElpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMMmh2YldVdlptVnljbUZ1TDNCeWIycGxZM1J6TDNSMGFXOHZjM1F0YlhWc2RHa3RjMjl5ZEM5emNtTXZjM1JmYzJocFpuUmZZMnhwWTJzdVkyOW1abVZsSWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFUczdPMEZCUVVFc1NVRkJRVHM3UVVGSFFTeFBRVUZQTEVOQlFVTXNUVUZCVWl4RFFVRmxMR0ZCUVdZc1EwRkZRU3hEUVVGRExFOUJSa1FzUTBGRlV5eGhRVVpVTEVWQlJYZENMRk5CUVVFN1FVRkRkRUlzVFVGQlFUdEZRVUZCTEdWQlFVRXNSMEZCYTBJN1UwRkZiRUk3U1VGRFJTeFJRVUZCTEVWQlFWVXNVMEZCUXl4VFFVRkVPMkZCUTFJc1pVRkJaU3hEUVVGRExFOUJRV2hDTEVOQlFYZENMRk5CUVhoQ0xFTkJRVUVzUjBGQmNVTTdTVUZFTjBJc1EwRkVXanRKUVVsRkxGbEJRVUVzUlVGQll5eFRRVUZETEZOQlFVUTdUVUZEV2l4SlFVRkhMR0ZCUVdsQ0xHVkJRV3BDTEVWQlFVRXNVMEZCUVN4TFFVRklPMlZCUTBVc1pVRkJaU3hEUVVGRExFbEJRV2hDTEVOQlFYRkNMRk5CUVhKQ0xFVkJSRVk3TzBsQlJGa3NRMEZLYUVJN1NVRlJSU3hMUVVGQkxFVkJRVThzVTBGQlFUdGhRVU5NTEdWQlFXVXNRMEZCUXl4TlFVRm9RaXhIUVVGNVFqdEpRVVJ3UWl4RFFWSlVPenRCUVVoelFpeERRVVo0UWlKOVxuIl19
